---
description: Onboarding document usefule for almost any task
globs: 
---
# Welcome to DoNew: Your Composable Task Library

Hello there, engineer and smart AI buddy! Welcome to DoNew — an open, composable, isolated, and extendable task library built to empower you to create, compose, and orchestrate intelligent workflows. Whether you're integrating AI capabilities or automating complex tasks, DoNew is designed to be both intuitive and powerful.

## What is DoNew?

DoNew is a Python package designed to empower AI agents to interact effortlessly with web content and documents through high-level, intuitive interfaces. It bridges the gap between advanced AI capabilities and real-world applications by offering robust tools for web automation, document processing, and autonomous task execution. Developers can build isolated tasks that integrate seamlessly with their favorite tools, composing them either horizontally as peers or vertically as nested workflows to orchestrate complex operations, all while keeping each task self-contained and extendable.

## Key Features
- Task Planning & Multi-Step Operations: Organize complex workflows with clear planning and sequential execution.
- Provision Isolation: Context is isolated from the rest of the world. Each provision is a self-contained unit during runtime.
- Web Automation (DO.Browse): Leverage Playwright-based browser automation featuring smart element detection, visual debugging, and integrated knowledge graph extraction.
- Knowledge Processing: Utilize multi-model entity extraction (GLiNER), relationship mapping (GLiREL), advanced text analysis with spaCy, and robust graph storage via KuzuDB.
- Task Composition & Context Awareness: Achieve both horizontal (parallel provisions) and vertical (nested tasks) composition with comprehensive state and context management.
- Plug-and-Play Provisions: Comes with batteries included—ready-made tools such as MCP.run tasks and Restack workflows.

## Terminology
- **Doer**: A task executor that can be enacted. instance of DO.New
- **Provision**: A tool that can be used to enact a doer.
- **Realm**: The context in which a doer is enacted.
- **Envision**: The expected output of a doer.
- **Enact**: The act that triggers a doer to start its journey.

## Goals
0. Intuitive interface DO.New for task execution, DO.Browse for standalone web automation
1. Provide AI-first interfaces for web and document interaction
2. Enable autonomous decision-making and task execution
3. Maintain high reliability and performance
4. Ensure excellent developer experience
5. Support both simple and complex AI agent workflows
6. Provide batteries included provisions
7. Hide underlying complexity from the user


### Core Architecture
- Python 3.10+ support
- Async-first design
- Type hints throughout
- Modular component design
- Extensive error handling


#### Technical Requirements
- Python 3.11+ support
- NLP integration
    - KG extraction using spaCy and GLiNER
- Graph database integration
    - KuzuDB
- Async support



## Repository File Structure

Below is a rough sketch of the DoNew repository structure to help you navigate the codebase:

```
donew/
├── __init__.py
├── utils.py              # Shared utilities and helper functions
├── envpaths.py          # Environment and configuration management
├── new/
│   ├── __init__.py
│   ├── realm/
│   │   ├── __init__.py
│   │   └── provisions/  # Pluggable task executors
│   │       ├── browse.py     # DO.Browse provision interface
│   │       ├── mcprun.py     # provision MCP.run tasks
│   │       ├── restack.py    # provision restack tasks
│   │       ├── new.py        # Core task composition engine it binds existing donew task as provision to realm of child donew task
│   │       └── __init__.py
│   └── doers/          # Task execution framework
│       ├── base.py     # Base doer definitions
│       ├── super.py    # Enhanced doer capabilities using huggingface SmolAgents (TO BE REPLACED WITH DO.New)
│       └── __init__.py
├── see/                # Content understanding engine
│   ├── processors/     # Content processing pipeline
│   │   ├── web.py     # Web automation and interaction (Playwright-based)
│   │   └── __init__.py
│   └── graph/         # Knowledge extraction system
│       └── __init__.py # Multi-model KG construction (GLiNER, GLiREL, spaCy)
└── scripts/
    └── web/           # Browser enhancement scripts
        ├── element_detection.js     # Smart element detection
        ├── text_markers.js          # Text content processing
        ├── highlight_elements.js    # Visual debugging support
        ├── restore_text_markers.js  # removes artifacts stemmed from text_markers.js
        └── highlight_styles.css     # Visual styling for highlight_elements.js


```

This structure shows how DoNew combines web automation, knowledge extraction, and task composition into a cohesive system. The `see/` directory handles content understanding and processing, while `new/` manages task composition and execution. The `scripts/` directory provides browser-side enhancements for web automation.



## Embracing Composability

One of DoNew's most powerful features is its ability to compose tasks both horizontally and vertically:

- **Horizontal Composability:** Attach multiple independent provisions to work in parallel, each contributing to the overall task.
- **Vertical Composability:** Use a DoNew task as a provision within another task, allowing for nested, more granular workflows.

A great test case to check out is `test_composability` in our test suite, which illustrates how different tasks can seamlessly integrate with each other.



### 1. Creating a Task with DO.New

Create a new task by using the `DO.New` method. This wraps your model or task executor in a way that it can be used to handle specific user requests. For example:

```python
from donew import DO

# Create a new task (doer) with a model
model = LitellmModel()
doer = DO.New(model, name='example_task', purpose='demonstrate basic usage')
```

### 2. Adding Context with realm()

The `realm` method is where your task provisions (executors) live. Think of it as the context for your task. You can pass one or many provisions here:

```python
# Assume browser is a provision for web tasks
browser = DO.Browse(headless=False)

doer = doer.realm([browser])
```

This tells DoNew that the task may interact with the web or require specific tools that are available as provisions.

### 3. Enforcing Output Structure with envision()

Before executing your task, you can call `envision` to specify the expected output format. This step is optional but helps guide the task in delivering results that adhere to a defined schema:

```python
from pydantic import BaseModel, Field

class Team(BaseModel):
    members: list[str] = Field(description='List of team members')

# This enforces that the output should match the Team schema
constrained_doer = doer.envision(Team)
```

### 4. Kickstarting the Workflow with enact()

Finally, the `enact` method initiates the task. It sends the task description (and any additional context) into DoNew's orchestration engine, triggering the flow among provisions:

```python
result = constrained_doer.enact('goto https://unrealists.com and find the team')
```

This call kicks off the complete orchestration, processing the task through the defined realm and eventually returning the result in the enforced format.

## How Do Provisions Work?

Provisions in DoNew are essentially your task executors. They are designed to be simple Python functions that accept input and deliver output. When you attach them via the `realm`, they can operate either in parallel (horizontal composability) or can invoke additional DoNew tasks (vertical composability).

For instance, you might have one provision that browses the web, another that parses content, and a third that formats the output. They can work together seamlessly to produce the final result.

## A Quick Example: Browsing and Extracting Team Info

Here's a snippet that showcases a typical flow:

```python
# Create a browser provision
browser = DO.Browse(headless=False)
model = LitellmModel(model='your-model-id')
# Create a task executor
doer = DO.New(model, name='example_task', purpose='demonstrate basic usage')

# Configure task with realm, envision schema, and enact the task
result = (
    doer.realm([browser])
        .envision(Team)
        .enact('goto https://unrealists.com and find the team')
)

print(result.model_dump_json(indent=2))
```

This code demonstrates how you can integrate a provision for web automation, enforce an output structure, and then trigger a complex orchestration, all in a fluent and composable manner.


### Knowledge Graph Integration

The content processing in DoNew follows a well-defined flow:

1. **Base Target Layer**
   - All processors inherit from `BaseTarget`
   - Must implement `text()` method for content extraction
   - Provides unified interface for analysis and querying

2. **Knowledge Graph Integration**
   ```python
   # Every processor can provide content for KG analysis
   async def a_analyze(self, **kwargs):
       if self._kg_analyzer is None:
           self._kg_analyzer = KnowledgeGraph()
       text = await self.a_text()  # Get content
       return self._kg_analyzer.analyze(id, text, **kwargs)
   ```

### Browser Architecture DO.Browse

   - `WebBrowser`: High-level API for web automation
     * Manages navigation and state
     * Maintains page history
     * Provides unified interface for provisions
   - `WebPage`: Represents single page state
     * Handles current page interactions
     * Implements BaseTarget for content processing
     * Feeds into knowledge graph pipeline




## Onboarding Next Steps

If you're new to DoNew, here are a few suggestions:

1. **Explore the Tests:** Take a look at `tests/test_new.py` and `tests/test_web_processor.py` for practical examples of how to use DoNew in various scenarios.
2. **Review the API Docs:** Familiarize yourself with methods like `envision`, `realm`, and `enact` and how they interact to build complex workflows.
3. **Experiment:** Modify example tasks or create new ones by composing different provisions. Experimentation is key to unlocking the full potential of DoNew.


